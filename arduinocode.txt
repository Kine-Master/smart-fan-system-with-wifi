#include <SoftwareSerial.h>
#include <EEPROM.h>

// Pin Definitions
const int lm35Pin = A0;
const int echoPin = 10;
const int trigPin = 9;
const int relaySpeed1 = 5;
const int relaySpeed2 = 6;
const int relaySpeed3 = 7;

// Software Serial for NodeMCU Communication
SoftwareSerial espSerial(2, 3); // RX, TX (Arduino pins)

// Variables
float temperature = 0.0, distance = 0.0;
bool fanStatus = false;

// Thresholds (modifiable remotely, stored in EEPROM)
float speed1Threshold, speed2Threshold, speed3Threshold, distanceThreshold;

// Hysteresis margin
const float hysteresisMargin = 1.0;

// EEPROM Storage Addresses
const int addr_speed1 = 0;
const int addr_speed2 = 4;
const int addr_speed3 = 8;
const int addr_distance = 12;

// Read float from EEPROM with a default value
float readFloatFromEEPROM(int addr, float defaultValue) {
    float value;
    EEPROM.get(addr, value);
    return (isnan(value) || value == 0.0) ? defaultValue : value;
}

// Write float to EEPROM
void writeFloatToEEPROM(int addr, float value) {
    EEPROM.put(addr, value);
    delay(10);
}

// Setup function
void setup() {
    Serial.begin(115200);
    espSerial.begin(9600);

    // Load thresholds from EEPROM or use default values
    speed1Threshold = readFloatFromEEPROM(addr_speed1, 28.0);
    speed2Threshold = readFloatFromEEPROM(addr_speed2, 32.0);
    speed3Threshold = readFloatFromEEPROM(addr_speed3, 36.0);
    distanceThreshold = readFloatFromEEPROM(addr_distance, 50.0);

    // Configure Pin Modes
    pinMode(echoPin, INPUT);
    pinMode(trigPin, OUTPUT);
    pinMode(relaySpeed1, OUTPUT);
    pinMode(relaySpeed2, OUTPUT);
    pinMode(relaySpeed3, OUTPUT);

    turnOffFan();
    
    Serial.println("System Initialized");
    Serial.println("Initial Thresholds:");
    Serial.print("Speed1: "); Serial.println(speed1Threshold);
    Serial.print("Speed2: "); Serial.println(speed2Threshold);
    Serial.print("Speed3: "); Serial.println(speed3Threshold);
    Serial.print("Distance: "); Serial.println(distanceThreshold);
}

// Main loop
void loop() {
    temperature = readTemperature();
    distance = getDistance();
    
    Serial.print("Temp: "); Serial.print(temperature);
    Serial.print(" Â°C | Distance: "); Serial.print(distance);
    Serial.println(" cm");

    controlFan();
    sendToESP();
    receiveFromESP();
    delay(1000);
}

// Turn off the fan
void turnOffFan() {
    digitalWrite(relaySpeed1, LOW);
    digitalWrite(relaySpeed2, LOW);
    digitalWrite(relaySpeed3, LOW);
    fanStatus = false;
}

// Read temperature
float readTemperature() {
    int sensorValue = analogRead(lm35Pin);
    float temp = (sensorValue * (5.0 / 1024.0)) * 100.0;
    Serial.print("Raw Temp Reading: "); Serial.println(temp);
    return temp;
}

// Measure distance
float getDistance() {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH, 25000);
    float dist = (duration / 2.0) * 0.0344;
    
    if (dist == 0) {
        Serial.println("Ultrasonic Sensor Timeout - No Echo");
        return 999; 
    }

    Serial.print("Raw Distance: "); Serial.println(dist);
    return dist;
}

// Set fan speed
void setFanSpeed(int speed) {
    static int lastSpeed = 0;

    if (speed == lastSpeed) return;
    
    turnOffFan();
    
    switch (speed) {
        case 1: digitalWrite(relaySpeed1, HIGH); Serial.println("Fan Speed: 1"); break;
        case 2: digitalWrite(relaySpeed2, HIGH); Serial.println("Fan Speed: 2"); break;
        case 3: digitalWrite(relaySpeed3, HIGH); Serial.println("Fan Speed: 3"); break;
        default: Serial.println("Fan Off"); break;
    }

    fanStatus = (speed > 0);
    lastSpeed = speed;
}

void controlFan() {
    if (distance >= distanceThreshold) {
        setFanSpeed(0);
        Serial.println("Fan turned off due to distance threshold");
        return;
    }

    int targetSpeed = (temperature >= (speed3Threshold + hysteresisMargin)) ? 3 :
                      (temperature >= (speed2Threshold + hysteresisMargin)) ? 2 :
                      (temperature >= (speed1Threshold + hysteresisMargin)) ? 1 : 0;

    setFanSpeed(targetSpeed);
}

// Send sensor data to NodeMCU
void sendToESP() {
    Serial.println("Sending data to ESP8266...");
    espSerial.print(temperature);
    espSerial.print(",");
    espSerial.print(distance);
    espSerial.print(",");
    espSerial.print(fanStatus ? "1" : "0");
    espSerial.print(",");
    espSerial.print(speed1Threshold);
    espSerial.print(",");
    espSerial.print(speed2Threshold);
    espSerial.print(",");
    espSerial.print(speed3Threshold);
    espSerial.print(",");
    espSerial.println(distanceThreshold);
    Serial.println("Data sent.");
}

// Receive threshold updates from NodeMCU
void receiveFromESP() {
    if (espSerial.available()) {
        String input = espSerial.readStringUntil('\n');
        input.trim();
        Serial.print("Received from ESP: "); Serial.println(input);

        if (input.startsWith("SET_TEMP1:")) {
            speed1Threshold = input.substring(10).toFloat();
            writeFloatToEEPROM(addr_speed1, speed1Threshold);
            Serial.print("Updated Speed1 Threshold: "); Serial.println(speed1Threshold);
        } else if (input.startsWith("SET_TEMP2:")) {
            speed2Threshold = input.substring(10).toFloat();
            writeFloatToEEPROM(addr_speed2, speed2Threshold);
            Serial.print("Updated Speed2 Threshold: "); Serial.println(speed2Threshold);
        } else if (input.startsWith("SET_TEMP3:")) {
            speed3Threshold = input.substring(10).toFloat();
            writeFloatToEEPROM(addr_speed3, speed3Threshold);
            Serial.print("Updated Speed3 Threshold: "); Serial.println(speed3Threshold);
        } else if (input.startsWith("SET_DIST:")) {
            distanceThreshold = input.substring(9).toFloat();
            writeFloatToEEPROM(addr_distance, distanceThreshold);
            Serial.print("Updated Distance Threshold: "); Serial.println(distanceThreshold);
        }
        
        espSerial.println("ACK");
    }
}
