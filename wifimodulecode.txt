#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>
#include <ESP8266HTTPClient.h>

// WiFi Credentials
const char* ssid = "KM";
const char* password = "wifipassword";

// HTTP API URLs
String settings_url = "http://172.20.10.2:3000/api/settings";
String senddata_url = "http://172.20.10.2:3000/receive-data";

// Software Serial for Arduino communication
SoftwareSerial arduinoSerial(D6, D5); // RX, TX (NodeMCU pins)

// Sensor variables
float temperature = 0.0, distance = 0.0;
bool fanStatus = false;
float speed1Threshold, speed2Threshold, speed3Threshold, distanceThreshold;

// Built-in LED pin
const int ledPin = LED_BUILTIN; // NodeMCU built-in LED (D0 / GPIO16)


// Read Data from Arduino
void readFromArduino() {
    if (arduinoSerial.available()) {
        String data = arduinoSerial.readStringUntil('\n');
        data.trim();
        
        Serial.print("üì° RAW DATA RECEIVED: ");
        Serial.println(data); // Debugging the received data
        
        if (data.length() > 0 && data.length() < 100) {
            char buf[100];
            data.toCharArray(buf, 100);

            char* token = strtok(buf, ",");
            if (token != NULL) temperature = atof(token);

            token = strtok(NULL, ",");
            if (token != NULL) distance = atof(token);

            token = strtok(NULL, ",");
            if (token != NULL) fanStatus = atoi(token);

            Serial.printf("‚úÖ Parsed Data: Temp=%.2f, Distance=%.2f, Fan=%d\n", 
                          temperature, distance, fanStatus);
        }
    }
}

// Send Sensor Data via WebSocket
void sendDataToServer() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå WiFi not connected! Skipping HTTP POST.");
        return;
    }

    WiFiClient client;
    HTTPClient http;


    Serial.println("üì° Sending data to server: ");
    Serial.println(senddata_url);

    StaticJsonDocument<256> jsonDoc;
    jsonDoc["temperature"] = temperature;
    jsonDoc["distance"] = distance;
    jsonDoc["fan_status"] = fanStatus;

    String requestBody;
    serializeJson(jsonDoc, requestBody);

    http.begin(client, senddata_url);
    http.addHeader("Content-Type", "application/json");

    int httpResponseCode = http.POST(requestBody);
    Serial.print("üì® HTTP Response Code: ");
    Serial.println(httpResponseCode);

    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println("‚úÖ Server Response: " + response);
    } else {
        Serial.println("‚ùå HTTP POST Failed!");
    }

    http.end();
}


// Fetch Updated Thresholds via HTTP
void fetchThresholds() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå WiFi disconnected! Skipping HTTP fetch.");
        return;
    }

    WiFiClient client;
    HTTPClient http;

    Serial.println("üì° Fetching settings from backend...");
    http.begin(client, settings_url);
    http.setTimeout(5000);  // Optional timeout for stability

    int httpCode = http.GET();

    if (httpCode == HTTP_CODE_OK) {
        String response = http.getString();
        
        // ‚úÖ Check for empty response
        if (response.length() == 0) {
            Serial.println("‚ùå Empty response received from server!");
            return;
        }

        // ‚úÖ Parse JSON response
        StaticJsonDocument<512> jsonDoc;  // Increase size if necessary
        DeserializationError error = deserializeJson(jsonDoc, response);
        
        if (error) {
            Serial.print("‚ùå JSON Parsing Error: ");
            Serial.println(error.f_str());
            return;
        }

        // ‚úÖ Check if "success" is true before proceeding
        if (jsonDoc["success"] == true) {
            JsonObject data = jsonDoc["settings"];
            
            // ‚úÖ Extract thresholds
            speed1Threshold = data["speed1_threshold"];
            speed2Threshold = data["speed2_threshold"];
            speed3Threshold = data["speed3_threshold"];
            distanceThreshold = data["distance_threshold"];

            // ‚úÖ Send thresholds to Arduino (for communication with main system)
            arduinoSerial.println("SET_TEMP1:" + String(speed1Threshold));
            arduinoSerial.println("SET_TEMP2:" + String(speed2Threshold));
            arduinoSerial.println("SET_TEMP3:" + String(speed3Threshold));
            arduinoSerial.println("SET_DIST:" + String(distanceThreshold));

            Serial.println("‚úÖ Thresholds updated successfully!");
        } else {
            Serial.println("‚ùå API Response returned success = false. Skipping update.");
        }
    } else {
        // ‚ùå Handle HTTP request error
        Serial.println("‚ùå Failed to fetch settings! HTTP Code: " + String(httpCode));
    }

    http.end();
}



// WiFi LED Status
void updateLED() {
    static unsigned long lastBlink = 0;
    static bool ledState = false;

    if (WiFi.status() == WL_CONNECTED) {
        digitalWrite(ledPin, LOW);  // LED ON (Connected) - Inverted logic
    } else {
        if (millis() - lastBlink > 500) {  // Blink every 500ms (Disconnected)
            ledState = !ledState;
            digitalWrite(ledPin, ledState ? LOW : HIGH);
            lastBlink = millis();
        }
    }
}

// Setup Function
void setup() {
    Serial.begin(115200);
    arduinoSerial.begin(9600);

    pinMode(ledPin, OUTPUT);
    digitalWrite(ledPin, HIGH);  // LED OFF initially (NodeMCU LED is active LOW)

    WiFi.begin(ssid, password);
    Serial.print("üåê Connecting to WiFi...");
    
    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 20000) { // 20s timeout
        updateLED();
        delay(500);
        Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ Connected to WiFi!");
        digitalWrite(ledPin, LOW); // LED ON (Connected)
    } else {
        Serial.println("\n‚ùå Failed to connect to WiFi! Check your credentials.");
    }

    fetchThresholds();
}

// Main Loop
void loop() {
    readFromArduino(); // Read sensor data
    updateLED();       // Manage LED status

    static unsigned long lastSendTime = 0;
    if (millis() - lastSendTime > 2000) { 
        sendDataToServer();  // Send data via HTTP
        lastSendTime = millis();
    }

    static unsigned long lastFetchTime = 0;
    if (millis() - lastFetchTime > 10000) {
        fetchThresholds();  // Fetch updated thresholds every 10s
        lastFetchTime = millis();
    }
}

